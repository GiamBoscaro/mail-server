/**
 * Entrypoint to configure and start the express server
 *
 * @summary Express Server
 * @author Giammarco Boscaro
 *
 * Created at     : 2024-11-10 14:04:41
 * Last modified  : 2024-11-10 14:04:41
 */

const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const OpenApiValidator = require('express-openapi-validator');
const config = require('./config');
const { loggerService } = require('./helpers');

const logger = loggerService.getClassLogger('ExpressServer');

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.load(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('constructor', `Failed to start Express Server: ${e.message}`);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    this.app.use(bodyParser.json({ limit: process.env.MAX_REQUEST_BODY_SIZE || '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    this.app.use(express.static(path.join(__dirname, 'public')));
    // CORS
    const additionalAllowedHeaders = process.env.ALLOWED_HEADERS ? process.env.ALLOWED_HEADERS.split(',') : [];
    this.app.use(cors({
      credentials: true,
      origin: process.env.ALLOWED_CORS_ORIGIN ? process.env.ALLOWED_CORS_ORIGIN.split(',') : [],
      exposedHeaders: ['Accept-Ranges, Content-Encoding, Content-Length, Content-Range'],
      allowedHeaders: ['Content-Type', 'Authorization', 'Accepts', 'Set-Cookie', 'Cookie', 'Range', ...additionalAllowedHeaders],
    }));

    if (config.NODE_ENV === 'development') {
      // Send the openapi document *AS GENERATED BY THE GENERATOR*
      this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
      // View the openapi document in a visual interface. Should be able to test from this page
      this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    }

    // Test page to test if server is running correctly
    this.app.get('/', (req, res) => {
      res.send(`Mailer Service Backend - Status OK - Env: ${config.NODE_ENV}`);
    });
  }

  launch() {
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(__dirname),
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
        validateRequests: true,
        validateResponses: false,
      }),
    );
    // eslint-disable-next-line no-unused-vars
    this.app.use((err, req, res, next) => {
      // format errors
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });
    http.createServer(this.app).listen(this.port);
    console.log(`Listening on port ${this.port}`);
  }

  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
