openapi: 3.0.3
info:
  contact:
    email: giammarco.boscaro@gmail.com
  description: |
    API documentation for Node.JS mailer microservice.
    SMTP Mail microservice sends emails to the users.

    [Repository](https://github.com/GiamBoscaro/mail-server.git)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: MAILER
  version: 1.0.0
servers:
- description: localhost
  url: http://localhost:3000
tags:
- description: Handles E-Mail functionalities
  name: Mail
- description: Service status and info
  name: Info
paths:
  /mail/plain:
    post:
      description: |
        Sends a plain text E-Mail
      operationId: sendPlainText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlainTextEmailRequestBody'
        description: Plain Text Email Request Body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                required:
                - success
          description: Operation completed successfully
        "400":
          content:
            application/json:
              example:
                status: 400
                message:
                  code: AUTH001
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                status: 401
                message:
                  code: AUTH001
                  message: Please Authenticate
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                status: 422
                message:
                  code: AUTH001
                  message: Unprocessable Content
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Content
        "500":
          content:
            application/json:
              example:
                status: 500
                message:
                  code: AUTH001
                  message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json:
              example:
                status: 503
                message:
                  code: AUTH001
                  message: Service Unavailable
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      security: []
      summary: Plain text E-Mail
      tags:
      - Mail
      x-eov-operation-handler: controllers/MailController
  /mail/html:
    post:
      description: |
        Sends an HTML E-Mail from a template
      operationId: sendHtml
      requestBody:
        content:
          application/json:
            examples:
              raw:
                value:
                  to:
                  - test@mail.com
                  subject: E-Mail Subject
                  template:
                    type: raw
                    content: '.....Angfuih52344nvckAFnk...'
                    encoding: base64
                  replacements:
                  - key: name
                    value: Mario
              path:
                value:
                  to:
                  - test@mail.com
                  subject: E-Mail Subject
                  template:
                    type: path
                    content: templates/example.html
                  replacements:
                  - key: name
                    value: Mario
            schema:
              $ref: '#/components/schemas/HtmlEmailRequestBody'
        description: HTML Email Request Body
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                required:
                - success
          description: Operation completed successfully
        "400":
          content:
            application/json:
              example:
                status: 400
                message:
                  code: AUTH001
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              example:
                status: 401
                message:
                  code: AUTH001
                  message: Please Authenticate
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "422":
          content:
            application/json:
              example:
                status: 422
                message:
                  code: AUTH001
                  message: Unprocessable Content
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Content
        "500":
          content:
            application/json:
              example:
                status: 500
                message:
                  code: AUTH001
                  message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json:
              example:
                status: 503
                message:
                  code: AUTH001
                  message: Service Unavailable
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      security: []
      summary: HTML E-Mail
      tags:
      - Mail
      x-eov-operation-handler: controllers/MailController
  /info/version:
    get:
      description: |
        Returns the server version running
      operationId: version
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: Server version
        "400":
          content:
            application/json:
              example:
                status: 400
                message:
                  code: AUTH001
                  message: Bad Request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              example:
                status: 500
                message:
                  code: AUTH001
                  message: Internal Server Error
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
        "503":
          content:
            application/json:
              example:
                status: 503
                message:
                  code: AUTH001
                  message: Service Unavailable
              schema:
                $ref: '#/components/schemas/Error'
          description: Service Unavailable
      security: []
      summary: Server version
      tags:
      - Info
      x-eov-operation-handler: controllers/InfoController
components:
  responses:
    SuccessResponse:
      content:
        application/json:
          schema:
            properties:
              success:
                example: true
                type: boolean
            required:
            - success
      description: Operation completed successfully
    VersionResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Version'
      description: Server version
    BadRequest:
      content:
        application/json:
          example:
            status: 400
            message:
              code: AUTH001
              message: Bad Request
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad Request
    Unauthorized:
      content:
        application/json:
          example:
            status: 401
            message:
              code: AUTH001
              message: Please Authenticate
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    Forbidden:
      content:
        application/json:
          example:
            status: 403
            message:
              code: AUTH001
              message: Forbidden
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    NotFound:
      content:
        application/json:
          example:
            status: 404
            message:
              code: AUTH001
              message: Not Found
          schema:
            $ref: '#/components/schemas/Error'
      description: Not Found
    UnprocessableContent:
      content:
        application/json:
          example:
            status: 422
            message:
              code: AUTH001
              message: Unprocessable Content
          schema:
            $ref: '#/components/schemas/Error'
      description: Unprocessable Content
    InternalServerError:
      content:
        application/json:
          example:
            status: 500
            message:
              code: AUTH001
              message: Internal Server Error
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal Server Error
    ServiceUnavailable:
      content:
        application/json:
          example:
            status: 503
            message:
              code: AUTH001
              message: Service Unavailable
          schema:
            $ref: '#/components/schemas/Error'
      description: Service Unavailable
  schemas:
    EmailHeader:
      properties:
        from:
          example: from@mail.com
          type: string
        to:
          items:
            example: to@mail.com
            type: string
          type: array
        cc:
          items:
            example: cc@mail.com
            type: string
          type: array
        bcc:
          items:
            example: bcc@mail.com
            type: string
          type: array
        subject:
          example: E-Mail Subject
          type: string
      required:
      - subject
      - to
      type: object
    PlainTextEmailRequestBody:
      allOf:
      - $ref: '#/components/schemas/EmailHeader'
      example:
        body: This is an email message
      properties:
        body:
          example: This is an email message
          type: string
      required:
      - body
      - subject
      - to
      type: object
    HtmlEmailRequestBody:
      allOf:
      - $ref: '#/components/schemas/EmailHeader'
      example:
        template:
          type: raw
          encoding: base64
          content: '...aGVsbG8gd29ybGQh...'
        attachments:
        - filename: sample.pdf
          encoding: base64
          content: '...aGVsbG8gd29ybGQh...'
        - filename: sample.pdf
          encoding: base64
          content: '...aGVsbG8gd29ybGQh...'
        replacements:
        - value: Mario
          key: name
        - value: Mario
          key: name
      properties:
        template:
          $ref: '#/components/schemas/EmailTemplate'
        replacements:
          items:
            $ref: '#/components/schemas/EmailReplacements'
          nullable: true
          type: array
        attachments:
          items:
            $ref: '#/components/schemas/EmailAttachment'
          nullable: true
          type: array
      required:
      - subject
      - template
      - to
    EmailAttachment:
      example:
        filename: sample.pdf
        encoding: base64
        content: '...aGVsbG8gd29ybGQh...'
      properties:
        filename:
          example: sample.pdf
          type: string
        content:
          example: '...aGVsbG8gd29ybGQh...'
          type: string
        encoding:
          default: utf8
          enum:
          - ascii
          - base64
          - base64url
          - latin1
          - hex
          - ucs2
          - utf8
          - utf16le
          example: base64
          type: string
      required:
      - content
      - filename
    EmailReplacements:
      example:
        value: Mario
        key: name
      properties:
        key:
          example: name
          pattern: ^[A-Za-z]+[A-Za-z0-9_]*$
          type: string
        value:
          example: Mario
          type: string
      required:
      - key
      - value
    EmailTemplate:
      example:
        type: raw
        encoding: base64
        content: '...aGVsbG8gd29ybGQh...'
      properties:
        content:
          description: |
            Either the path to the template or an HTML Base64 encoded
          example: '...aGVsbG8gd29ybGQh...'
          type: string
        type:
          default: raw
          enum:
          - path
          - raw
          example: raw
          type: string
        encoding:
          default: utf8
          enum:
          - base64
          - utf8
          example: base64
          type: string
      required:
      - content
    Version:
      example:
        patch: 0
        major: 1
        minor: 0
        version: 1.0.0
      properties:
        major:
          example: 1
          type: integer
        minor:
          example: 0
          type: integer
        patch:
          example: 0
          type: integer
        version:
          example: 1.0.0
          type: string
      required:
      - major
      - minor
      - patch
      - version
      type: object
    Error:
      properties:
        status:
          example: 401
          type: number
        timestamp:
          format: date-time
          type: string
        path:
          example: /api/login
          type: string
        message:
          $ref: '#/components/schemas/Error_message'
      required:
      - message
      - status
      type: object
    Error_message:
      properties:
        code:
          example: AUTH001
          type: string
        message:
          example: User is not authenticated
          type: string
      type: object
